牛客NC34
一个机器人在m×n大小的地图的左上角（起点）。
机器人每次可以向下或向右移动。机器人要到达地图的右下角（终点）。
可以有多少种不同的路径从起点走到终点？

备注：m和n小于等于100,并保证计算结果在int范围内



1.dp方程

public int uniquePaths (int m, int n) {
        // 定义dp数组
   
       int dp[120][120] ={0};
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                // 当 i = 0：dp[0][j] = dp[0][j-1]
                if(i == 0){
                    dp[i][j] = 1; // 都是1是因为dp[0][j] = dp[0][j-1]，所以干脆全部赋值为1
                    continue;
                }
                // 当 j = 0：dp[i][0] = dp[i-1][0]
                if(j == 0){
                    dp[i][j] = 1;
                    continue;
                }
                // 当 i > 1 && j > 1 :  dp[i][j] = dp[i][j-1] + dp[i-1][j]
                dp[i][j] = dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m-1][n-1]; // 返回到达终点的所有可行路径
    }

 2.递归
 public int uniquePaths (int m, int n) {
        // 起点（1，1） 这里为什么是（1，1）呢？其实是一样的，我们上面的方法定义了（0，0）为起点，那么终点就为（m-1，n-1）
        // 这里起点为（1，1）那么终点就为 （m，n）
        if(m == 1 || n == 1)
            return 1;
        // 终点（m，n）
        return uniquePaths(m,n-1)+uniquePaths(m-1,n);
    }
